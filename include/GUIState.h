/*******************************************************************************************
 *
 *   ATViewer v1.0.0 - (Almost) Autogenerated GUI from rGuiLayout
 *
 **********************************************************************************************/

#pragma once

// STL includes
#include <algorithm>

#include "raylib-cpp.hpp"

namespace raygui {
#include "raygui.h"
// After
#include "GUIStyleCyber.h"
} // namespace raygui

class GUIState {
public:
  // Define anchors
  raylib::Vector2 atsInfoLocation = { 8, 8 }; // ANCHOR ID:1
  raylib::Vector2 settingsLocation = { 8, 104 }; // ANCHOR ID:2

  // Define controls variables
  bool choreoSelectorEditMode = false;
  int choreoSelectorActive = 0; // DropdownBox: choreoSelector
  bool settingsWindowBoxActive = false; // WindowBox: settingsWindowBox
  raylib::Color lhsColorPickerValue = PURPLE; // ColorPicker: lhsColorPicker
  raylib::Color rhsColorPickerValue = ORANGE; // ColorPicker: rhsColorPicker
  raylib::Color barrierColorPickerValue = RED; // ColorPicker: barrierColorPicker

  // Custom state variables (depend on development software)
  // NOTE: This variables should be added manually if required
  std::string atsTitle;
  std::string atsArtist;
  std::string atsBpmDuration;
  std::string choreoNames;
  std::vector<std::string> choreoNamesVector;

  void init() { // NOLINT(readability-convert-member-functions-to-static)
    raygui::GuiLoadStyleCyber();
  }

  void setChoreoNames(const std::vector<std::string> &names) {
    choreoNamesVector = names;
    choreoNames.clear();

    for (std::string &name : choreoNamesVector) {
      std::replace_if(
        name.begin(), name.end(), [](std::string::value_type v) { return v == ';'; }, ' ');
      choreoNames += name;

      if (&name != &choreoNamesVector.back())
        choreoNames += ";";
    }
  }

  void Draw() {
    float mainBoxWidth = 296;
    float maxTextWidth = static_cast<float>(
      std::max({ MeasureTextEx(raygui::GuiGetFont(), atsTitle.c_str(), 30, 1).x + 2 * 8,
                 MeasureTextEx(raygui::GuiGetFont(), atsArtist.c_str(), 20, 1).x + 3 * 8 +
                   MeasureTextEx(raygui::GuiGetFont(), atsBpmDuration.c_str(), 20, 1).x }));
    float expandSize = 0;

    if (maxTextWidth > mainBoxWidth) {
      expandSize = maxTextWidth - mainBoxWidth;
    }

    float choreoSelectorWidth = 176 + expandSize;
    float maxChoreoSelTextWidth = 0;
    for (const std::string &name : choreoNamesVector) {
      float width = MeasureTextEx(raygui::GuiGetFont(),
                                  name.c_str(),
                                  static_cast<float>(raygui::GuiGetStyle(raygui::DROPDOWNBOX, raygui::TEXT_SIZE)),
                                  1)
                      .x +
                    8 * 2 + 10;
      if (width > maxChoreoSelTextWidth)
        maxChoreoSelTextWidth = width;
    }
    if (maxChoreoSelTextWidth > choreoSelectorWidth) {
      expandSize += maxChoreoSelTextWidth - choreoSelectorWidth;
      choreoSelectorWidth = maxChoreoSelTextWidth;
    }
    mainBoxWidth += expandSize;

    // Draw controls
    if (choreoSelectorEditMode)
      raygui::GuiLock();

    if (settingsWindowBoxActive) {
      settingsWindowBoxActive = !raygui::GuiWindowBox((Rectangle){ settingsLocation.x + 0,
                                                                   settingsLocation.y + 0,
                                                                   296,
                                                                   280 },
                                                      "Settings");
      raygui::GuiGroupBox((Rectangle){ settingsLocation.x + 8, settingsLocation.y + 40, 136, 112 }, "Left hand color");
      lhsColorPickerValue = raygui::GuiColorPicker((Rectangle){ settingsLocation.x + 16,
                                                                settingsLocation.y + 48,
                                                                96,
                                                                96 },
                                                   lhsColorPickerValue);
      raygui::GuiGroupBox((Rectangle){ settingsLocation.x + 152, settingsLocation.y + 40, 136, 112 },
                          "Right hand color");
      rhsColorPickerValue = raygui::GuiColorPicker((Rectangle){ settingsLocation.x + 160,
                                                                settingsLocation.y + 48,
                                                                96,
                                                                96 },
                                                   rhsColorPickerValue);
      raygui::GuiGroupBox((Rectangle){ settingsLocation.x + 8, settingsLocation.y + 160, 136, 112 }, "Barrier color");
      barrierColorPickerValue = raygui::GuiColorPicker((Rectangle){ settingsLocation.x + 16,
                                                                    settingsLocation.y + 168,
                                                                    96,
                                                                    96 },
                                                       barrierColorPickerValue);
      raygui::GuiGroupBox((Rectangle){ settingsLocation.x + 152, settingsLocation.y + 160, 136, 112 }, "Controls help");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 176, 120, 10 },
                       "WASD: Move around");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 192, 120, 10 },
                       "Page up/down: prev/");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 202, 120, 10 },
                       "next beat");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 216, 120, 10 },
                       "M: Toggle mouse");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 224, 120, 10 },
                       "capture");
      raygui::GuiLabel((Rectangle){ settingsLocation.x + 160, settingsLocation.y + 240, 120, 10 },
                       "Esc: Quit");
    }

    raygui::GuiPanel((Rectangle){ atsInfoLocation.x + 0, atsInfoLocation.y + 0, mainBoxWidth, 88 });

    // GuiLabels don't allow changing the font size
    DrawTextEx(raygui::GuiGetFont(),
               atsTitle.c_str(),
               { atsInfoLocation.x + 8, atsInfoLocation.y + 8 },
               30,
               1,
               ::GetColor(raygui::GuiGetStyle(raygui::LABEL, raygui::TEXT_COLOR_NORMAL)));
    DrawTextEx(raygui::GuiGetFont(),
               atsArtist.c_str(),
               { atsInfoLocation.x + 8, atsInfoLocation.y + 32 },
               20,
               1,
               ::GetColor(raygui::GuiGetStyle(raygui::LABEL, raygui::TEXT_COLOR_NORMAL)));
    DrawTextEx(raygui::GuiGetFont(),
               atsBpmDuration.c_str(),
               { atsInfoLocation.x + expandSize + 180, atsInfoLocation.y + 32 },
               20,
               1,
               ::GetColor(raygui::GuiGetStyle(raygui::LABEL, raygui::TEXT_COLOR_NORMAL)));

    //    raygui::GuiLabel((Rectangle){ atsInfoLocation.x + 8, atsInfoLocation.y + 8, 280, 24 }, atsTitle.c_str());
    //    raygui::GuiLabel((Rectangle){ atsInfoLocation.x + 8, atsInfoLocation.y + 32, 184, 16 }, atsArtist.c_str());
    //    raygui::GuiLabel((Rectangle){ atsInfoLocation.x + 200, atsInfoLocation.y + 32, 88, 16 },
    //    atsBpmDuration.c_str());

    settingsWindowBoxActive = raygui::GuiToggle((Rectangle){ atsInfoLocation.x + 192 + expandSize,
                                                             atsInfoLocation.y + 56,
                                                             96,
                                                             24 },
                                                "Settings + Help",
                                                settingsWindowBoxActive);
    if (raygui::GuiDropdownBox((Rectangle){ atsInfoLocation.x + 8, atsInfoLocation.y + 56, choreoSelectorWidth, 24 },
                               choreoNames.c_str(),
                               &choreoSelectorActive,
                               choreoSelectorEditMode))
      choreoSelectorEditMode = !choreoSelectorEditMode;

    raygui::GuiUnlock();
  }
};
